# main.py
# Run: pip install pyTelegramBotAPI
# BOT_TOKEN env var set ржХрж░рзБржи, ржирж╛ рж╣рж▓рзЗ ржирж┐ржЪрзЗрж░ ржбрж╛ржорж┐ ржЯрзЛржХрзЗржи ржмржжрж▓рзЗ ржжрж┐ржи

import os
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from state import USER_GROUPS, GROUP_SETTINGS   # рждрзЛржорж╛рж░ ржмрж┐ржжрзНржпржорж╛ржи state.py
try:
    # utils.py рждрзЗ ржерж╛ржХрж▓рзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЛ
    from utils import register_group_for_user
except Exception:
    register_group_for_user = None

BOT_TOKEN = os.environ.get("BOT_TOKEN", "8218499502:AAEsLD_W_QO4WIz1yuAg-QF9fuIcmBDI-DY")
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# ---------- Helpers ----------
def _link_user_group(user_id: int, gid: int, title: str):
    """
    USER_GROUPS-ржП ржЗржЙржЬрж╛рж░тЖФржЧрзНрж░рзБржк рж▓рж┐ржВржХ рж╕рзЗржн ржХрж░рзЗред
    utils.register_group_for_user ржерж╛ржХрж▓рзЗ ржУржЯрж╛ ржЗржЙржЬ ржХрж░рж┐,
    ржирж╛ ржерж╛ржХрж▓рзЗ USER_GROUPS.connect() ржЯрзНрж░рж╛ржЗ, рж╕рзЗржЯрж╛ржУ ржирж╛ ржерж╛ржХрж▓рзЗ
    рж╕рж░рж╛рж╕рж░рж┐ ржбрж┐ржХрж╢ржирж╛рж░рж┐рждрзЗ ржмрж╕рж╛ржЗред
    """
    title = title or str(gid)
    if register_group_for_user:
        try:
            register_group_for_user(user_id, gid, title)
            return
        except Exception:
            pass
    try:
        USER_GROUPS.connect(user_id, gid, title)  # рждрзЛржорж╛рж░ state.py рждрзЗ ржерж╛ржХрзЗ
        return
    except Exception:
        pass
    # ржлрзЛрж▓ржмрзНржпрж╛ржХ: рж╕рж░рж╛рж╕рж░рж┐ dict ржП
    m = USER_GROUPS[user_id]
    m[int(gid)] = {"title": title}
    USER_GROUPS[user_id] = m

# ---------- START ----------
START_TEXT = "тЬл ЁЭЭЬЁЭЭЪт│Рт│РЁЭЭд тАМ{mention} ╤аЁЭЭЪт│РЁЭЧЦЁЭЭдЁЭЭбЁЭЭЪ ЁЭЭйЁЭЭд ЁЭЭб╞│ ЁЭЭЬЁЭЭдЁЭЭбЁЭЭЪ тЬл"

@bot.message_handler(commands=['start'])
def start_cmd(m):
    u = bot.get_me().username

    # deep-link ?start=gid_... ржерж╛ржХрж▓рзЗ, рждржмрзБ ржкрзНрж░ржержорзЗ рж╕рзНржЯрж╛рж░рзНржЯ ржЯрзЗржХрзНрж╕ржЯржЗ ржжрзЗржЦрж╛ржмрзЛ
    mention = f"<a href='tg://user?id={m.from_user.id}'>{m.from_user.first_name}</a>"
    start_text = START_TEXT.replace("{mention}", mention)

    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton("тЮХ Add to Group", url=f"https://t.me/{u}?startgroup=true"))

    args = (m.text or "").split(maxsplit=1)
    if len(args) == 2 and args[1].startswith("gid_"):
        try:
            gid = int(args[1].replace("gid_", ""))
            info = USER_GROUPS[m.from_user.id].get(gid)
            # рж╕рзНржЯрж╛рж░рзНржЯ ржЯрзЗржХрзНрж╕ржЯ ржкрж╛ржарж╛ржЗ
            bot.reply_to(m, start_text, parse_mode="HTML", reply_markup=kb)
            # ржЪрж╛ржЗрж▓рзЗ ржирж┐ржЪрзЗрж░ ржмрзНрж▓ржХ ржЕржи ржХрж░рж▓рзЗ deep-link рж╕рзЗржЯрж┐ржВрж╕ ржорзЗрж╕рзЗржЬржУ рж╕рж╛ржерзЗ ржжрзЗржЦрж╛рждрзЗ ржкрж╛рж░рзЛ:
            # if info:
            #     bot.send_message(
            #         m.chat.id,
            #         f"тЪЩя╕П <b>Settings</b>\nGroup: <b>{info['title']}</b>\n\n"
            #         "Filters manage in PM",
            #         parse_mode="HTML"
            #     )
            return
        except Exception:
            # ржХрзЛржирзЛ ржХрж╛рж░ржгрзЗржЗ ржкрж╛рж░рзНрж╕ ржирж╛ рж╣рж▓рзЗтАФржбрж┐ржлрж▓рзНржЯ рж╕рзНржЯрж╛рж░рзНржЯ
            bot.reply_to(m, start_text, parse_mode="HTML", reply_markup=kb)
            return

    # ржбрж┐ржлрж▓рзНржЯ рж╕рзНржЯрж╛рж░рзНржЯ
    bot.reply_to(m, start_text, parse_mode="HTML", reply_markup=kb)

# ---------- CONNECT / SETTINGS ----------
@bot.message_handler(commands=['settings'])
def settings_cmd(m):
    """
    ржЧрзНрж░рзБржкрзЗ /settings ржжрж┐рж▓рзЗ ржЗржЙржЬрж╛рж░рзЗрж░ рж╕рж╛ржерзЗ ржПржЗ ржЧрзНрж░рзБржкржЯрж╛ рж▓рж┐ржЩрзНржХ ржХрж░рзЗ ржжрж┐ржмрзЛ тАФ admin рж▓рж╛ржЧржмрзЗ ржирж╛ред
    PM-ржП ржжрж┐рж▓рзЗ рж▓рж┐ржЩрзНржХржб ржЧрзНрж░рзБржк рж▓рж┐рж╕рзНржЯ ржжрзЗржЦрж╛ржмрзЛред
    """
    if m.chat.type in ("group", "supergroup"):
        _link_user_group(m.from_user.id, m.chat.id, m.chat.title or str(m.chat.id))
        u = bot.get_me().username
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("ЁЯФЧ Open in PM", url=f"https://t.me/{u}?start=gid_{m.chat.id}"))
        bot.reply_to(m, "тЬЕ Linked! ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржЪрж╛ржк ржжрж┐рзЯрзЗ PM-ржП ржУржкрзЗржи ржХрж░рзБржиред", reply_markup=kb)
        return

    # PM тЖТ ржЧрзНрж░рзБржк рж▓рж┐рж╕рзНржЯ ржжрзЗржЦрж╛ржУ
    groups = USER_GROUPS[m.from_user.id]
    if not groups:
        bot.reply_to(m, "ржХрзЛржирзЛ ржЧрзНрж░рзБржк рж▓рж┐ржЩрзНржХ ржХрж░рж╛ ржирзЗржЗред")
        return
    kb = InlineKeyboardMarkup()
    for gid, info in groups.items():
        kb.add(InlineKeyboardButton(info["title"], callback_data=f"pm_open:{gid}"))
    bot.reply_to(m, "ЁЯСЙ ржПржХржЯрж┐ ржЧрзНрж░рзБржк ржмрзЗржЫрзЗ ржирж┐ржи:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("pm_open:"))
def pm_open_cb(c):
    gid = int(c.data.split(":")[1])
    info = USER_GROUPS[c.from_user.id].get(gid)
    if not info:
        bot.answer_callback_query(c.id, "ржПржЗ ржЧрзНрж░рзБржкржЯрж┐ рж▓рж┐ржЩрзНржХ ржХрж░рж╛ ржирзЗржЗред")
        return
    bot.answer_callback_query(c.id, "Opened")
    bot.edit_message_text(
        f"тЪЩя╕П <b>Settings</b>\nGroup: <b>{info['title']}</b>\n\n"
        "Filters manage in PM",
        c.message.chat.id, c.message.message_id, parse_mode="HTML"
    )

@bot.message_handler(commands=['connect'])
def connect_cmd(m):
    """
    PM ржерзЗржХрзЗ ржорзНржпрж╛ржирзБрзЯрж╛рж▓рж┐ `/connect -100xxxxxxxxxx` ржжрж┐рж▓рзЗ рж▓рж┐ржЩрзНржХ рж╣ржмрзЗред
    ржЧрзНрж░рзБржк/ржмржЯ ржЕрзНржпрж╛ржбржорж┐ржи рж╣ржУрзЯрж╛ рж▓рж╛ржЧржмрзЗ ржирж╛ред
    """
    if m.chat.type not in ("private",):
        bot.reply_to(m, "ржПржЗ ржХржорж╛ржирзНржбржЯрж╛ PM-ржП ржжрж┐ржи", parse_mode="HTML")
        return
    parts = (m.text or "").split(maxsplit=1)
    if len(parts) < 2:
        bot.reply_to(m, "use right format", parse_mode="HTML")
        return
    try:
        gid = int(parts[1])
    except Exception:
        bot.reply_to(m, "рж╕ржарж┐ржХ group id ржжрж┐ржи", parse_mode="HTML")
        return
    # ржЯрж╛ржЗржЯрзЗрж▓ ржЬрж╛ржирж╛ ржирж╛ ржерж╛ржХрж▓рзЗржУ рж▓рж┐ржЩрзНржХ ржХрж░ржмрзЛ
    title = str(gid)
    try:
        ch = bot.get_chat(gid)
        title = getattr(ch, "title", None) or title
    except Exception:
        pass
    _link_user_group(m.from_user.id, gid, title)
    bot.reply_to(m, f"тЬЕ Linked: <b>{title}</b> (ID: <code>{gid}</code>)\nNow select group", parse_mode="HTML")

# ---------- Register Filters module ----------
from modules.filters import register as register_filters
register_filters(bot)

print("Bot is runningтАж")
bot.infinity_polling(
    allowed_updates=['message','callback_query','chat_member','my_chat_member','chat_join_request'],
    timeout=20, long_polling_timeout=20
)